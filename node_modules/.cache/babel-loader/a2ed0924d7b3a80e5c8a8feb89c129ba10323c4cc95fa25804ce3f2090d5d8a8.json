{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_GLOBAL_OPTIONS, DEFAULT_DB_OPTIONS, DEFAULT_AUTH_OPTIONS, DEFAULT_REALTIME_OPTIONS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n    this.realtimeUrl = \"\".concat(_supabaseUrl, \"/realtime/v1\").replace(/^http/i, 'ws');\n    this.authUrl = \"\".concat(_supabaseUrl, \"/auth/v1\");\n    this.storageUrl = \"\".concat(_supabaseUrl, \"/storage/v1\");\n    this.functionsUrl = \"\".concat(_supabaseUrl, \"/functions/v1\");\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = \"sb-\".concat(new URL(this.authUrl).hostname.split('.')[0], \"-auth-token\");\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(\"\".concat(_supabaseUrl, \"/rest/v1\"), {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n    this._listenForAuthEvents();\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch\n    });\n  }\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n  }\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation) {\n    return this.rest.from(relation);\n  }\n  // NOTE: signatures must be kept in sync with PostgrestClient.schema\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema(schema) {\n    return this.rest.schema(schema);\n  }\n  // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc(fn) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.rest.rpc(fn, args, options);\n  }\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n    return this.realtime.channel(name, opts);\n  }\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels() {\n    return this.realtime.getChannels();\n  }\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel) {\n    return this.realtime.removeChannel(channel);\n  }\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels() {\n    return this.realtime.removeAllChannels();\n  }\n  _getAccessToken() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data\n      } = yield this.auth.getSession();\n      return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n    });\n  }\n  _initSupabaseAuthClient(_ref, headers, fetch) {\n    let {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n      debug\n    } = _ref;\n    const authHeaders = {\n      Authorization: \"Bearer \".concat(this.supabaseKey),\n      apikey: \"\".concat(this.supabaseKey)\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, authHeaders), headers),\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      debug,\n      fetch\n    });\n  }\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign({\n        apikey: this.supabaseKey\n      }, options === null || options === void 0 ? void 0 : options.params)\n    }));\n  }\n  _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n    });\n    return data;\n  }\n  _handleTokenChanged(event, source, token) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      // Token has changed\n      this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey);\n      if (source == 'STORAGE') this.auth.signOut();\n      this.changedAccessToken = undefined;\n    }\n  }\n}","map":{"version":3,"names":["FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_GLOBAL_OPTIONS","DEFAULT_DB_OPTIONS","DEFAULT_AUTH_OPTIONS","DEFAULT_REALTIME_OPTIONS","fetchWithAuth","stripTrailingSlash","applySettingDefaults","SupabaseAuthClient","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","Error","_supabaseUrl","realtimeUrl","concat","replace","authUrl","storageUrl","functionsUrl","defaultStorageKey","URL","hostname","split","DEFAULTS","db","realtime","auth","Object","assign","storageKey","global","settings","_b","_a","headers","_d","_c","_initSupabaseAuthClient","_e","_f","fetch","_getAccessToken","bind","_g","_initRealtimeClient","rest","schema","_h","_listenForAuthEvents","functions","customFetch","storage","from","relation","rpc","fn","args","arguments","length","undefined","channel","name","opts","config","getChannels","removeChannel","removeAllChannels","data","getSession","session","access_token","_ref","autoRefreshToken","persistSession","detectSessionInUrl","flowType","debug","authHeaders","Authorization","apikey","url","params","onAuthStateChange","event","_handleTokenChanged","source","token","changedAccessToken","setAuth","signOut"],"sources":["/Users/tracyhung/Documents/Full Stack Web App/node_modules/@supabase/supabase-js/src/SupabaseClient.ts"],"sourcesContent":["import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/auth-js'\nimport {\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n} from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport {\n  DEFAULT_GLOBAL_OPTIONS,\n  DEFAULT_DB_OPTIONS,\n  DEFAULT_AUTH_OPTIONS,\n  DEFAULT_REALTIME_OPTIONS,\n} from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n  realtime: RealtimeClient\n\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected rest: PostgrestClient<Database, SchemaName>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken?: string\n\n  protected headers: Record<string, string>\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n    this.functionsUrl = `${_supabaseUrl}/functions/v1`\n\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth?.storageKey ?? ''\n    this.headers = settings.global?.headers ?? {}\n\n    this.auth = this._initSupabaseAuthClient(\n      settings.auth ?? {},\n      this.headers,\n      settings.global?.fetch\n    )\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\n\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: settings.db?.schema,\n      fetch: this.fetch,\n    })\n\n    this._listenForAuthEvents()\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.from\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table, TableName>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View, ViewName>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any, any> {\n    return this.rest.from(relation)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.schema\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema<DynamicSchema extends string & keyof Database>(\n    schema: DynamicSchema\n  ): PostgrestClient<\n    Database,\n    DynamicSchema,\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\n  > {\n    return this.rest.schema<DynamicSchema>(schema)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(\n    fn: FnName,\n    args: Fn['Args'] = {},\n    options: {\n      head?: boolean\n      get?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    Schema,\n    Fn['Returns'] extends any[]\n      ? Fn['Returns'][number] extends Record<string, unknown>\n        ? Fn['Returns'][number]\n        : never\n      : never,\n    Fn['Returns']\n  > {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? null\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n      debug,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      debug,\n      fetch,\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session?.access_token)\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    source: 'CLIENT' | 'STORAGE',\n    token?: string\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token ?? null)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}